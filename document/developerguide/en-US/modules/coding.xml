<?xml version="1.0" encoding="UTF-8"?>
<chapter id="coding">
  <title>Coding</title>

  <section id="sourcecodestyle">
    <title>Source code formatting</title>
    
    <para>JBoss Tattletale uses 3 spaces for indentation with curly brakets on the next line
      as the class or the statement.</para>

    <programlisting>
/**
 * My class
 */
public class MyClass
{
  /**
   * My method
   */
  public void myMethod()
  {
    if (value)
    {
      // Do something
    }
    else
    {
      // Do something else
    }
  }
}
    </programlisting>

    <para>Remember to add JavaDoc for all classes and methods.</para>

    <para>You can verify the formatting rules by running checkstyle on the source code:</para>

    <programlisting>
ant checkstyle
    </programlisting>

    <para>See the source code for more examples of the source code formatting rules.</para>

  </section>

  <section id="report">
    <title>Adding a new report</title>

    <para>Adding a new report to JBoss Tattletale is very easy, so if you have found a report that you
      would like to see that shouldn't stop you from adding it.</para>

    <para>You need a class that implements: </para>

    <programlisting>
org.jboss.tattletale.reporting.Report
    </programlisting>

    <para> The JavaDoc for JBoss Tattletale will show you
      the class hierarchy as you may want to extend from another class (org.jboss.tattletale.reporting.AbstractReport) for example.</para>

    <para>After you have implemented the new report you add it to the properties file 'jboss-tattletale.properties'. For example:</para>

 	 <programlisting>
	 	customreport.1=my.custom.package.customreport
	 </programlisting>
	
	<para>
		At runtime, as long as your custom jar file is in the classpath your custom report will be generated. 
		If you were running from the command line for example:
	</para>
				
	<programlisting>
		java -classpath tattletale.jar:customreporting.jar org.jboss.tattletale.Main [directory-of-source-jar] [output-directory]
	</programlisting>
  </section>

  <section id="cls">
    <title>Adding a new classloader structure</title>

    <para>JBoss Tattletale include functionality to identify certain classloader structures.</para>

    <para>The plugins must implement the</para>

    <programlisting>
 org.jboss.tattletale.reporting.classloader.ClassLoaderStructure
    </programlisting>

    <para>interface and contain a default no-argument constructor.</para>

    <para>The interface only contain one method that needs to be implemented:</para>

    <programlisting>
/**
 * Can one archive see the other
 * @param from The from archive
 * @param to The to archive
 * @return True if from can see to; otherwise false
 */
public boolean isVisible(Archive from, Archive to);
    </programlisting>

    <para>which returns true if the "from" archive can see the "to" archive. Otherwise false should be returned.</para>

    <para>The current plugins can be used as a starting point for developing a new plugin:</para>

    <itemizedlist>
      <listitem>
        <para>org.jboss.tattletale.reporting.classloader.NoopClassLoaderStructure</para>
        <para>A no operation plugin that always will include the queried archive in the report.</para>
      </listitem>
      <listitem>
        <para>org.jboss.tattletale.reporting.classloader.JBossAS4ClassLoaderStructure</para>
        <para>Plugin for the JBoss Application Server 4.x series.</para>
      </listitem>
      <listitem>
        <para>org.jboss.tattletale.reporting.classloader.JBossAS5ClassLoaderStructure</para>
        <para>Plugin for the JBoss Application Server 5.x series.</para>
      </listitem>
    </itemizedlist>

    <para>The plugin is loaded through the 'classloader' key in jboss-tattletale.properties file.
      See the user guide for more information.</para>

  </section>

</chapter>
